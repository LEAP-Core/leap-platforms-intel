  Copyright(c) 2015-2016, Intel Corporation

  Redistribution  and  use  in source  and  binary  forms,  with  or  without
  modification, are permitted provided that the following conditions are met:

  * Redistributions of  source code  must retain the  above copyright notice,
    this list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
  * Neither the name  of Intel Corporation  nor the names of its contributors
    may be used to  endorse or promote  products derived  from this  software
    without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
  IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT OWNER  OR CONTRIBUTORS BE
  LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR
  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT LIMITED  TO,  PROCUREMENT  OF
  SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA, OR PROFITS;  OR BUSINESS
  INTERRUPTION)  HOWEVER CAUSED  AND ON ANY THEORY  OF LIABILITY,  WHETHER IN
  CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.


MPF -- Memory Properties Factory
================================

The raw Xeon+FPGA CCI (Cache Coherent Interface) exposes a primitive connection
to memory.  Addresses are physical and, except for write fence, no completion
order guarantees are provided.

MPF is a collection of CCI to CCI shims, each adding a feature to the resulting
interface.  Shims can be composed to generate memory interfaces with properties
required for a particular application.  Shims include:

* VTP - Virtual to Physical translation

* WRO - Write/Read Order: guarantee write/write and write/read order within
  a cache line

* Read response sorting


Hardware implementation
-----------------------

MPF RTL implementation files can be found in the HW/ subdirectory.

cci_mpf.sv is provided as a standard wrapper for building typical
configurations.  Module cci_mpf is configurable with parameters that control
instantiation of shims.

MPF RTL is broken into several directories, each with a README file:

* cci-if: Packages and functions that describe and operate on CCI.

* cci-mpf-if: An extension of cci-if with extra state required to control
    the behavior of shims.  For example, the CCI-MPF interface adds a bit
    to indicate whether a memory request's address is virtual or physical.
    The README file in cci-mpf-if describes the differences between CCI
    and CCI-MPF.

* cci-mpf-shims: Shim implementations.

* cci-mpf-prims: A collection of primitive modules used by the shims.

See HW/cci-mpf-if/NOTES for information in instantiating MPF in a design.


Software implementation
-----------------------

The VTP shim also requires the use of a software service built on top of the
Accelerator Abstraciton Layer (AAL). This VTP service initializes the page table
used for virtual to physical address translations, provides functions for VTP
shim initialization, and presents an API for creation and management of shared
buffers. It is built as an AAL service that re-uses an existing ALI interface 
(such as established by HWALIAFU or ASEALIAFU) - you can think of it as a
software shim between the ALIBuffer interface and your application.

The sources for the VTP service can be found in the SW/ subdirectory together
with a README detailing how to build and instantiate it in your design.

