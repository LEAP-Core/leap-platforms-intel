import os
import re
import sys
import SCons.Script
import model
import synthesis_library 

class PostSynthesize():

    def __init__(self, moduleList):
        altera_apm_name = moduleList.compileDirectory + '/' + moduleList.apmName
        qsf_src_dir = moduleList.env['DEFS']['ROOT_DIR_HW_MODEL']

        rel_qsf_src_dir = model.rel_if_not_abspath(qsf_src_dir, moduleList.compileDirectory)

        ## QA build expects to build sys_cfg_pkg.svh in the build directory
        if (os.path.exists(qsf_src_dir + '/sys_cfg_pkg.svh') and
            not os.path.exists(moduleList.compileDirectory + '/sys_cfg_pkg.svh')):
            os.symlink(rel_qsf_src_dir + '/sys_cfg_pkg.svh',
                       moduleList.compileDirectory + '/sys_cfg_pkg.svh')

        altera_qsf = altera_apm_name + '.qsf'
        altera_qpf = altera_apm_name + '.qpf'

        prjFile = open(altera_qsf, 'w')

        prjFile.write('source ' + rel_qsf_src_dir + '/qa_canoe_pass_config.qsf\n\n')

        prjFile.write('source ' + rel_qsf_src_dir + '/qsf_env_settings.qsf\n')
        prjFile.write('source ' + rel_qsf_src_dir + '/qsf_qph_PAR_files.qsf\n')
        prjFile.write('source ' + rel_qsf_src_dir + '/qsf_qlp_PAR_files.qsf\n')
        prjFile.write('set_global_assignment -name SDC_FILE ' + rel_qsf_src_dir + '/sdc_qph.sdc\n')
        prjFile.write('set_global_assignment -name SDC_FILE ' + rel_qsf_src_dir + '/sdc_qlp.sdc\n\n')

        # Add in all the verilog here. 
        [globalVerilogs, globalVHDs] = synthesis_library.globalRTLs(moduleList, moduleList.moduleList)
         
        # gather verilog for LI Modules. 
        for module in [ mod for mod in moduleList.synthBoundaries()] + [moduleList.topModule]:
            globalVerilogs += [model.get_temp_path(moduleList,module) + module.wrapperName() + '.v']

        for v in globalVerilogs:
            t = 'VERILOG'
            if ((v[-2:] == 'sv') or (v[-2:] == 'vh')):
                t = 'SYSTEMVERILOG'
            v = model.rel_if_not_abspath(v, moduleList.compileDirectory)
            prjFile.write('set_global_assignment -name ' + t + '_FILE ' + v + '\n'); 

        for v in globalVHDs:
            v = model.rel_if_not_abspath(v, moduleList.compileDirectory)
            prjFile.write('set_global_assignment -name VHDL_FILE ' + v + '\n'); 

        # add the verilogs of the files generated by quartus system builder
        for v in model.Utils.clean_split(moduleList.env['DEFS']['GIVEN_ALTERAVS'], sep = ' ') :
            v = model.rel_if_not_abspath(v, moduleList.compileDirectory)
            prjFile.write('set_global_assignment -name VERILOG_FILE ' + v + '\n'); 

        prjFile.close()

        # generate sof
        altera_sof = moduleList.env.Command(altera_apm_name + '.sof',
                                            globalVerilogs + globalVHDs + [altera_qsf],
                                            ['quartus_sh --flow compile ' + altera_qpf,
                                             'quartus_sta --do_report_timing ' + altera_qpf,
                                             'quartus_sh --archive ' + altera_apm_name])

        moduleList.topModule.moduleDependency['BIT'] = [altera_sof]

        # generate the download program
        newDownloadFile = open('config/' + moduleList.apmName + '.download.temp', 'w')
        newDownloadFile.write('#!/bin/sh\n')
        newDownloadFile.write('nios2-configure-sof ' + altera_apm_name + '.sof\n')
        newDownloadFile.close()

        altera_download = moduleList.env.Command(
            'config/' + moduleList.apmName + '.download',
            'config/' + moduleList.apmName + '.download.temp',
            ['cp $SOURCE $TARGET',
             'chmod 755 $TARGET'])

        altera_loader = moduleList.env.Command(
            moduleList.apmName + '_hw.errinfo',
            moduleList.swExe + moduleList.topModule.moduleDependency['BIT'] + altera_download,
            ['@ln -fs ' + moduleList.swExeOrTarget + ' ' + moduleList.apmName,
             SCons.Script.Delete(moduleList.apmName + '_hw.exe'),
             SCons.Script.Delete(moduleList.apmName + '_hw.vexe'),
             '@echo "++++++++++++ Post-Place & Route ++++++++"',
             'touch ' + moduleList.apmName + '_hw.errinfo'])

        moduleList.topModule.moduleDependency['LOADER'] = [altera_loader]
        moduleList.topDependency = moduleList.topDependency + [altera_loader]
